//fastpassgen -f Grammer.fpg -o Parser.cs -n RockStarToCS.Parsing -t ParseNode -r root -at -s

using RockStarToCS.Parsing.ParseNodes

//root node
root => rstarprog => x[0] as ParseNode

//rockstar program
rstarprog => EOF => new ParseNodeList()
//just the one block allowed for now
rstarprog => blk => x[0] as ParseNode

//blocks
blk => stmtlst eline => x[0] as ParseNode
blk => stmtlst => x[0] as ParseNode

//statement list
stmtlst => stmtlst stmtlst => { var lst =x[0] as ParseNodeList; lst.Add(x[1] as ParseNode); return lst; }
stmtlst => stmt => new ParseNodeList(x[0] as ParseNode)

//statements
stmt => ass NL => x[0] as ParseNode
stmt => io NL => x[0] as ParseNode
stmt => incdec NL => x[0] as ParseNode
stmt => psla NL => x[0] as ParseNode
stmt => arth NL => x[0] as ParseNode
stmt => loop => x[0] as ParseNode

//functions

//loops
loop => WHILE arth NL blk => new WhileParseNode(x[0] as Token, x[1] as ParseNode, x[3] as ParseNode)

//i/o
io => SAY arth => new OutputParseNode(x[0] as Token, x[1] as ParseNode)
io => LSTN var => new InputParseNode(x[0] as Token, x[1] as VariableParseNode)

//assignments
ass => var is NULL => new AssignmentParseNode((x[1] as TokenParseNode).T, new NullParseNode(x[2] as Token), x[0] as VariableParseNode)
ass => var is bool => new AssignmentParseNode((x[1] as TokenParseNode).T, x[2] as ParseNode, x[0] as VariableParseNode)
ass => var is wrdlst => new AssignmentParseNode((x[1] as TokenParseNode).T, x[2] as ParseNode, x[0] as VariableParseNode)
ass => var is STR => new AssignmentParseNode((x[1] as TokenParseNode).T, x[2] as StringParseNode, x[0] as VariableParseNode)
ass => PUT arth INTO var => new PutIntoParseNode(x[0] as Token, x[3] as VariableParseNode, x[1] as ParseNode)

//is
is => IS => new TokenParseNode(x[0] as Token)
is => WAS => new TokenParseNode(x[0] as Token)

//variables
var => CVARSP WORD => new VariableParseNode(x[0] as Token, (x[0] as Token).Value.ToLower() + " " + (x[1] as Token).Value, false)
var => PVAR => new VariableParseNode(x[0] as Token, (x[0] as Token).Value, true)
var => LVAR => new VariableParseNode(x[0] as Token)

//poetic string literal assignment
psla => var SAYS wrdlst => new StringLiteralAssignmentParseNode(x[1] as Token, x[0] as VariableParseNode, x[2] as ParseNodeList)

//booleans
bool => TRUE => new BooleanParseNode(x[0] as Token)
bool => FALSE => new BooleanParseNode(x[0] as Token)

//increment/decrement
incdec => BLD var UP => new IncDecParseNode(x[0] as Token, x[1] as VariableParseNode, true)
incdec => KNK var DWN => new IncDecParseNode(x[0] as Token, x[1] as VariableParseNode, false)

//arithmetic
arth => comp => x[0] as ParseNode
comp => mult IS NOT comp => new InvertComparisonParseNode(x[1] as Token, new EqParseNode(x[1] as Token, x[0] as ParseNode, x[3] as ParseNode))
comp => mult AINT comp => new InvertComparisonParseNode(x[1] as Token, new EqParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode))
comp => mult IS comp => new EqParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode)
comp => mult IS GT THAN comp => new GtParseNode(x[1] as Token, x[0] as ParseNode, x[4] as ParseNode)
comp => mult IS AS LTEQ AS comp => new InvertComparisonParseNode(x[0] as Token, new GtParseNode(x[1] as Token, x[0] as ParseNode, x[5] as ParseNode))
comp => mult IS LT THAN comp => new LtParseNode(x[1] as Token, x[0] as ParseNode, x[4] as ParseNode)
comp => mult IS AS GTEQ AS comp => new InvertComparisonParseNode(x[0] as Token, new LtParseNode(x[1] as Token, x[0] as ParseNode, x[5] as ParseNode))
comp => mult => x[0] as ParseNode
mult => add MULT mult => new MultiplyParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode)
mult => add DIV mult => new DivisionParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode)
mult => add => x[0] as ParseNode
add => atom ADD add => new AdditionParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode)
add => atom SUB add => new SubtractParseNode(x[1] as Token, x[0] as ParseNode, x[2] as ParseNode)
add => atom => x[0] as ParseNode

//atoms
atom => bool => x[0] as ParseNode
atom => var => x[0] as ParseNode
atom => str => x[0] as ParseNode
atom => NULL => new NullParseNode(x[0] as Token)
atom => NUM => new NumberParseNode(x[0] as Token, (x[0] as Token).Value)

//word lists
wrdlst => wrdlst wrdlst => { var lst = x[0] as ParseNodeList; lst.Add(x[1] as ParseNode); return lst; }
wrdlst => wrd => new ParseNodeList(x[0] as ParseNode)

wrd => WORD => new WordParseNode(x[0] as Token)
wrd => CVARSP => new WordParseNode(x[0] as Token)
wrd => PVAR => new WordParseNode(x[0] as Token)
wrd => LVAR => new WordParseNode(x[0] as Token)
wrd => PUT => new WordParseNode(x[0] as Token)
wrd => INTO => new WordParseNode(x[0] as Token)
wrd => IS => new WordParseNode(x[0] as Token)
wrd => SAYS => new WordParseNode(x[0] as Token)
wrd => ADD => new WordParseNode(x[0] as Token)
wrd => SUB => new WordParseNode(x[0] as Token)
wrd => MULT => new WordParseNode(x[0] as Token)
wrd => DIV => new WordParseNode(x[0] as Token)
wrd => BLD => new WordParseNode(x[0] as Token)
wrd => KNK => new WordParseNode(x[0] as Token)
wrd => UP => new WordParseNode(x[0] as Token)
wrd => DOWN => new WordParseNode(x[0] as Token)
wrd => SAY => new WordParseNode(x[0] as Token)
wrd => LSTN => new WordParseNode(x[0] as Token)
wrd => UNDEF => new WordParseNode(x[0] as Token)
wrd => NULL => new WordParseNode(x[0] as Token)
wrd => TRUE => new WordParseNode(x[0] as Token)
wrd => FALSE => new WordParseNode(x[0] as Token)
wrd => NOT => new WordParseNode(x[0] as Token)
wrd => AINT => new WordParseNode(x[0] as Token)
wrd => THAN => new WordParseNode(x[0] as Token)
wrd => GT => new WordParseNode(x[0] as Token)
wrd => LT => new WordParseNode(x[0] as Token)
wrd => AS => new WordParseNode(x[0] as Token)
wrd => GTEQ => new WordParseNode(x[0] as Token)
wrd => LTEQ => new WordParseNode(x[0] as Token)

//empty line
//can match to a single empty line or many
eline => eline eline => x[0] as ParseNode
eline => ELINE => new EmptyLineParseNode(x[0] as Token)
eline => EOF => new EmptyLineParseNode(x[0] as Token)
eline => NL => new EmptyLineParseNode(x[0] as Token)

//strings
str => STR => new StringParseNode(x[0] as Token, (x[0] as Token).Value)